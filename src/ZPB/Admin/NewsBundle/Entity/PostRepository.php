<?php

namespace ZPB\Admin\NewsBundle\Entity;

use Doctrine\ORM\EntityRepository;
/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    public function findAllPublished($targets = [])
    {
        $qb = $this->createQueryBuilder('p')
            ->leftJoin('p.category', 'c')
            ->leftJoin('p.tags','t')
            ->leftJoin('p.targets','ta')
            ->andWhere('p.isPublished=:isPublished')
                ;

        if($targets != null){
            $qb->andWhere('ta.slug IN (:inTarget)')
                ->setParameter('inTarget', $targets)
            ;
        }
        $qb->orderBy('p.publishedAt', 'DESC')
            ->setParameter('isPublished', true)
        ;

        return $qb->getQuery()->getResult();
    }

    public function findAllDraft()
    {
        $qb = $this->createQueryBuilder('p')
            ->leftJoin('p.category', 'c')
            ->leftJoin('p.tags','t')
            ->leftJoin('p.targets','ta')
            ->andWhere('p.isDraft=:isDraft')
            ;
        $qb->orderBy('p.createdAt', 'DESC')
            ->setParameter('isDraft', true)
        ;

        return $qb->getQuery()->getResult();
    }



    public function solveTags(Post $post)
    {
        if(!count($post->getTags())){
            return $this;
        }
        foreach($post->getTags() as $tag){
            $test = $this->_em->getRepository('ZPBAdminNewsBundle:PostTag')->findOneByName($tag->getName());
            if($test){
                $post->removeTag($tag);
                $post->addTag($test);
                $test->addPost($post);
                $this->_em->persist($test);
            } else {
                $tag->addPost($post);
                $this->_em->persist($tag);
            }
        }
        return $this;
    }

    public function solveFronts(Post $post)
    {

        if(!count($post->getFronts())){
            return $this;
        }
        foreach($post->getFronts() as $k=>$id){
            $target = $this->_em->getRepository('ZPBAdminNewsBundle:PostTarget')->find($id);

            if($target){
                $target->setFrontPostId($post->getLongId());
                $this->_em->persist($target);

            }
        }
        return $this;
    }

    public function publish(Post $post)
    {
        $post
            ->setIsPublished(true)
            ->setIsDraft(false)
            ->setIsDropped(false)
            ->setIsArchive(false)
            ->setPublishedAt(new \DateTime('now', new \DateTimeZone('Europe/Paris')))
            ->setArchivedAt(null)
            ->setDroppedAt(null)
        ;

        return $this;
    }

    public function archive(Post $post)
    {
        $post
            ->setIsPublished(false)
            ->setIsDraft(false)
            ->setIsDropped(false)
            ->setIsArchive(true)
            ->setArchivedAt(new \DateTime('now', new \DateTimeZone('Europe/Paris')))
        ;
        $this->removeFromFront($post);
        return $this;
    }

    public function drop(Post $post)
    {
        $post
            ->setIsPublished(false)
            ->setIsDraft(false)
            ->setIsDropped(true)
            ->setIsArchive(false)
            ->setDroppedAt(new \DateTime('now', new \DateTimeZone('Europe/Paris')))
        ;
        $this->removeFromFront($post);
        return $this;
    }

    public function removeFromFront(Post $post)
    {
        $targets = $this->_em->getRepository('ZPBAdminNewsBundle:PostTarget')->findByFrontPostId($post->getLongId());
        if(!$targets){
            return $this;
        }
        foreach($targets as $target){
            /** @var \ZPB\Admin\NewsBundle\Entity\PostTarget $target */
            $target->setFrontPostId(null);
        }
        return $this;
    }

    public function getStatus(Post $post)
    {
        if($post->getIsDropped()){
            return 'A la corbeille';
        }
        if($post->getIsPublished()){
            return 'PubliÃ©';
        }
        if($post->getIsArchive()){
            return 'Archive';
        }
        return 'Brouillon';
    }
}
